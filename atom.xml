<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lengmuyun&#39;s Blog</title>
  
  <subtitle>锲而不舍，金石可镂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lengmuyun.github.io/"/>
  <updated>2019-01-06T23:57:15.353Z</updated>
  <id>https://lengmuyun.github.io/</id>
  
  <author>
    <name>lengmuyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP三次握手四次挥手</title>
    <link href="https://lengmuyun.github.io/2019/01/06/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://lengmuyun.github.io/2019/01/06/TCP三次握手四次挥手/</id>
    <published>2019-01-06T06:45:04.000Z</published>
    <updated>2019-01-06T23:57:15.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-TCP报文首部"><a href="#1-TCP报文首部" class="headerlink" title="1.TCP报文首部"></a>1.TCP报文首部</h3><blockquote><p>TCP报文首部格式如下图所示</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/83c51503ly1fyx5sxvwnlj20i80chwf1.jpg" alt="image"></p><ul><li>序号，占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；</li><li>确认号，占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</li><li>确认ACK，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</li><li>同步SYN，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；</li><li>终止FIN，用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</li></ul><h3 id="2-TCP三次握手"><a href="#2-TCP三次握手" class="headerlink" title="2.TCP三次握手"></a>2.TCP三次握手</h3><ol><li>TCP客户进程向服务器发出连接请求报文，报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 <strong>SYN-SENT（同步已发送状态）状态</strong>。</li><li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了 <strong>SYN-RCVD（同步收到）状态</strong>。</li><li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入 <strong>ESTABLISHED（已建立连接）状态</strong>。当服务器收到客户端的确认后也进入 <strong>ESTABLISHED状态</strong>，此后双方就可以开始通信了。</li></ol><p><img src="https://ws1.sinaimg.cn/large/83c51503ly1fyx6b5ncppj20uz0en0te.jpg" alt="image"></p><h3 id="3-TCP四次挥手"><a href="#3-TCP四次挥手" class="headerlink" title="3.TCP四次挥手"></a>3.TCP四次挥手</h3><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入<strong>FIN-WAIT-1（终止等待1）状态</strong>。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。客户端收到服务器的确认请求后，此时，客户端就进入<strong>FIN-WAIT-2（终止等待2）状态</strong>，等待服务器发送连接释放报文</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了<strong>LAST-ACK（最后确认）状态</strong>，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了<strong>TIME-WAIT（时间等待）状态</strong>。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入<strong>CLOSED</strong>状态。服务器只要收到了客户端发出的确认，立即进入<strong>CLOSED</strong>状态。</li></ol><p><img src="https://ws1.sinaimg.cn/large/83c51503ly1fyx71lt4esj20tm0j0my8.jpg" alt="image"></p><p>参考链接:</p><p><a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="noopener">https://blog.csdn.net/qzcsu/article/details/72861891</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-TCP报文首部&quot;&gt;&lt;a href=&quot;#1-TCP报文首部&quot; class=&quot;headerlink&quot; title=&quot;1.TCP报文首部&quot;&gt;&lt;/a&gt;1.TCP报文首部&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TCP报文首部格式如下图所示&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java内存区域和内存溢出异常</title>
    <link href="https://lengmuyun.github.io/2018/07/01/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>https://lengmuyun.github.io/2018/07/01/Java内存区域和内存溢出异常/</id>
    <published>2018-07-01T14:34:01.000Z</published>
    <updated>2018-07-02T04:46:16.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-2-运行时数据区域"><a href="#2-2-运行时数据区域" class="headerlink" title="2.2 运行时数据区域"></a>2.2 运行时数据区域</h3><blockquote><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p></blockquote><p><img src="http://www.2cto.com/uploadfile/Collfiles/20161103/201611030932231070.jpg" alt="image"></p><h4 id="2-2-1-程序计数器"><a href="#2-2-1-程序计数器" class="headerlink" title="2.2.1 程序计数器"></a>2.2.1 程序计数器</h4><blockquote><p>程序计数器(Program Counter Register)是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。</p><p>在虚拟机的概念模型里(仅是概念模型，各种虚拟机的可能会通过一些更高效的方式去实现)，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></blockquote><h4 id="2-2-2-Java虚拟机栈"><a href="#2-2-2-Java虚拟机栈" class="headerlink" title="2.2.2 Java虚拟机栈"></a>2.2.2 Java虚拟机栈</h4><blockquote><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>局部变量表存放了编译期可知的各种基本数据类型(boolean，byte，char，short，int，float，long，double)、对象引用(reference类型，它不等同于对象本身，可能是一条指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址)。</p></blockquote><h4 id="2-2-3-本地方法栈"><a href="#2-2-3-本地方法栈" class="headerlink" title="2.2.3 本地方法栈"></a>2.2.3 本地方法栈</h4><blockquote><p>本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈是为虚拟机执行Java方法(也就是字节码)服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p></blockquote><h4 id="2-2-4-Java堆"><a href="#2-2-4-Java堆" class="headerlink" title="2.2.4 Java堆"></a>2.2.4 Java堆</h4><blockquote><p>所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</p><p>Java堆还可以细分为：新生代和老年代；再细致一点的有：Eden空间、From Survivor空间、To Survivor空间等。</p></blockquote><h4 id="2-2-5-方法区"><a href="#2-2-5-方法区" class="headerlink" title="2.2.5 方法区"></a>2.2.5 方法区</h4><blockquote><p>方法区(Method Area)与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></blockquote><h4 id="2-2-6-运行时常量池"><a href="#2-2-6-运行时常量池" class="headerlink" title="2.2.6 运行时常量池"></a>2.2.6 运行时常量池</h4><blockquote><p>运行时常量池(Runtime Constant Pool)是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-2-运行时数据区域&quot;&gt;&lt;a href=&quot;#2-2-运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;2.2 运行时数据区域&quot;&gt;&lt;/a&gt;2.2 运行时数据区域&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Java虚拟机在执行Java程序的过程中会
      
    
    </summary>
    
      <category term="深入理解Java虚拟机笔记" scheme="https://lengmuyun.github.io/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>第九章-用正则表达式进行搜索</title>
    <link href="https://lengmuyun.github.io/2018/05/22/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2/"/>
    <id>https://lengmuyun.github.io/2018/05/22/第九章-用正则表达式进行搜索/</id>
    <published>2018-05-21T23:46:31.000Z</published>
    <updated>2018-05-31T15:11:36.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-1-正则表达式介绍"><a href="#9-1-正则表达式介绍" class="headerlink" title="9.1 正则表达式介绍"></a>9.1 正则表达式介绍</h3><blockquote><p>正则表达式是用来匹配文本的特殊的串（字符集合）</p></blockquote><h3 id="9-2-使用MySQL正则表达式"><a href="#9-2-使用MySQL正则表达式" class="headerlink" title="9.2 使用MySQL正则表达式"></a>9.2 使用MySQL正则表达式</h3><blockquote><p>正则表达式的作用是匹配文本，将一个模式（正则表达式）与一个文本串进行比较。。MySQL用WHERE子句对正则表达式提供了初步的支持，允许你指定正则表达式，过滤SELECT检索出的数据。</p></blockquote><h4 id="9-2-1-基本字符匹配"><a href="#9-2-1-基本字符匹配" class="headerlink" title="9.2.1 基本字符匹配"></a>9.2.1 基本字符匹配</h4><ul><li>检索列prod_name包含文本1000的所有行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-进行OR匹配"><a href="#9-2-2-进行OR匹配" class="headerlink" title="9.2.2 进行OR匹配"></a>9.2.2 进行OR匹配</h4><blockquote><p>为搜索两个串之一（或者为这个串，或者为另一个串），使用|;</p><p>|为正则表达式的OR操作符;</p><p>使用|从功能上类似于在SELECT语句中使用OR语句，多个OR条件可并入单个正则表达式。</p></blockquote><ul><li>检索列prod_name包含1000或2000的所有行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1000|2000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-3-匹配几个字符之一"><a href="#9-2-3-匹配几个字符之一" class="headerlink" title="9.2.3 匹配几个字符之一"></a>9.2.3 匹配几个字符之一</h4><blockquote><p>可通过指定一组用[和]括起来的字符来完成匹配特定的字符</p></blockquote><ul><li>[]是另一种形式的OR语句。正则表达式[123] Ton为[1|2|3] Ton的缩写，也可以使用后者</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[123] ton'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">prod_id</th><th style="text-align:center">prod_name</th></tr></thead><tbody><tr><td style="text-align:center">ANV02</td><td style="text-align:center">1 ton anvil</td></tr><tr><td style="text-align:center">ANV03</td><td style="text-align:center">2 ton anvil</td></tr></tbody></table><ul><li>除非把字符|括在一个集合中，否则它将应用于整个串</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1|2|3 ton'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>1 ton anvil</td></tr><tr><td>2 ton anvil</td></tr><tr><td>JetPack 1000</td></tr><tr><td>JetPack 2000</td></tr><tr><td>TNT (1 stick)</td></tr></tbody></table><ul><li>字符集合也可以被否定，即，它们将匹配除指定字符外的任何东西。为否定一个字符集，在集合的开始处放置一个^即可。[^123]却匹配除这些字符外的任何东西。</li></ul><h4 id="9-2-4-匹配范围"><a href="#9-2-4-匹配范围" class="headerlink" title="9.2.4 匹配范围"></a>9.2.4 匹配范围</h4><blockquote><p>集合可用来定义要匹配的一个或多个字符。</p><p>下面的集合将匹配数字0到9：[0123456789]，等同于[0-9]；[a-z]匹配任意字母字符。</p><ul><li>例子</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[1-5] ton'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-5-匹配特殊字符"><a href="#9-2-5-匹配特殊字符" class="headerlink" title="9.2.5 匹配特殊字符"></a>9.2.5 匹配特殊字符</h4><blockquote><p>正则表达式语言由具有特定含义的特殊字符构成。匹配这些字符.，[]，|和-应该怎么办</p><p>为了匹配特殊字符，必须用\为前导。\-表示查找-，\.表示查找.</p><p>正则表达式内具有特殊意义的所有字符都必须以这种方式转义。这包括.、|、[]以及迄今为止使用过的其他特殊字符。</p></blockquote><ul><li>找出包含.字符的值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">WHERE</span> vend_name REGEXP <span class="string">'.'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>vend_name</th></tr></thead><tbody><tr><td>Anvils R Us</td></tr><tr><td>LT Supplies</td></tr><tr><td>ACME</td></tr><tr><td>Furball Inc.</td></tr><tr><td>Jet Set</td></tr><tr><td>Jouets Et Ours</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">WHERE</span> vend_name REGEXP <span class="string">'\\.'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>vend_name</th></tr></thead><tbody><tr><td>Furball Inc.</td></tr></tbody></table><h4 id="9-2-6-匹配字符类"><a href="#9-2-6-匹配字符类" class="headerlink" title="9.2.6 匹配字符类"></a>9.2.6 匹配字符类</h4><blockquote><p>预定义的字符集，称为字符类（character class）。(见MySQL必知必会p58)</p></blockquote><h4 id="9-2-7-匹配多个实例"><a href="#9-2-7-匹配多个实例" class="headerlink" title="9.2.7 匹配多个实例"></a>9.2.7 匹配多个实例</h4><ul><li>表9-3 重复元字符</li></ul><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">0个或多个匹配</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">1个或多个匹配(等于{1,})</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">0个或1个匹配(等于{0,1})</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">指定数目的匹配</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">不少于指定数目的匹配</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">匹配数目的范围(m不超过255)</td></tr></tbody></table><ul><li>[0-9]匹配任意数字（这个例子中为1和5），sticks?匹配stick和sticks（s后的?使s可选，因为?匹配它前面的任何字符的0次或1次出现），\)匹配)。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'\\([1-5] sticks?\\)'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>TNT (1 stick)</td></tr><tr><td>TNT (5 sticks)</td></tr></tbody></table><ul><li>[:digit:]匹配任意数字，{4}确切地要求它前面的字符（任意数字）出现4次，所以[[:digit:]]{4}匹配连在一起的任意4位数字。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[[:digit:]]&#123;4&#125;'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-8-定位符"><a href="#9-2-8-定位符" class="headerlink" title="9.2.8 定位符"></a>9.2.8 定位符</h4><ul><li>表9-4 定位元字符</li></ul><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">文本的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">文本的结束</td></tr><tr><td style="text-align:center">[[:&lt;:]]</td><td style="text-align:center">词的开始</td></tr><tr><td style="text-align:center">[[:&gt;:]]</td><td style="text-align:center">词的结束</td></tr></tbody></table><ul><li>找出以一个数（包括以小数点开始的数）开始的所有产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'^[0-9\\.]'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>.5 ton anvil</td></tr><tr><td>1 ton anvil</td></tr><tr><td>2 ton anvil</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;9-1-正则表达式介绍&quot;&gt;&lt;a href=&quot;#9-1-正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;9.1 正则表达式介绍&quot;&gt;&lt;/a&gt;9.1 正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;正则表达式是用来匹配文本的特殊的串（字符集
      
    
    </summary>
    
      <category term="MySQL必知必会笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>第八章-用通配符进行过滤</title>
    <link href="https://lengmuyun.github.io/2018/05/22/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/"/>
    <id>https://lengmuyun.github.io/2018/05/22/第八章-用通配符进行过滤/</id>
    <published>2018-05-21T23:41:02.000Z</published>
    <updated>2018-05-31T15:03:35.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8-1-LIKE操作符"><a href="#8-1-LIKE操作符" class="headerlink" title="8.1 LIKE操作符"></a>8.1 LIKE操作符</h3><h4 id="8-1-1-百分号-通配符"><a href="#8-1-1-百分号-通配符" class="headerlink" title="8.1.1 百分号(%)通配符"></a>8.1.1 百分号(%)通配符</h4><blockquote><p>最常使用的通配符是百分号（%）。在搜索串中，%表示任何字符出现任意次数。</p><p>%代表搜索模式中给定位置的0个、1个或多个字符。</p></blockquote><ul><li>找出所有以词jet起头的产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'jet%'</span>;</span><br></pre></td></tr></table></figure><ul><li>找出所有以词包含文本anvil的产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'%anvil%'</span>;</span><br></pre></td></tr></table></figure><ul><li>找出以s起头以e结尾的所有产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'s%e'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>1.注意尾空格 在保存词anvil 时， 如果它后面有一个或多个空格， 则子句WHERE prod_name LIKE ‘%anvil’将不会匹配它们;</p><p>2.注意NULL 虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。</p></blockquote><h4 id="8-1-2-下划线-通配符"><a href="#8-1-2-下划线-通配符" class="headerlink" title="8.1.2 下划线(_)通配符"></a>8.1.2 下划线(_)通配符</h4><blockquote><p>另一个有用的通配符是下划线（_）。下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。</p></blockquote><ul><li>以下划线(_)通配符检索数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'_ ton anvil'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_id</th><th style="text-align:center">prod_name</th></tr></thead><tbody><tr><td>ANV02</td><td style="text-align:center">1 ton anvil</td></tr><tr><td>ANV03</td><td style="text-align:center">2 ton anvil</td></tr></tbody></table><ul><li>以百分号(%)通配符检索数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'% ton anvil'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_id</th><th style="text-align:center">prod_name</th></tr></thead><tbody><tr><td>ANV01</td><td style="text-align:center">.5 ton anvil</td></tr><tr><td>ANV02</td><td style="text-align:center">1 ton anvil</td></tr><tr><td>ANV03</td><td style="text-align:center">2 ton anvil</td></tr></tbody></table><h3 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h3><blockquote><p>MySQL的通配符很有用。但这种功能是有代价的：通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。</p></blockquote><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;8-1-LIKE操作符&quot;&gt;&lt;a href=&quot;#8-1-LIKE操作符&quot; class=&quot;headerlink&quot; title=&quot;8.1 LIKE操作符&quot;&gt;&lt;/a&gt;8.1 LIKE操作符&lt;/h3&gt;&lt;h4 id=&quot;8-1-1-百分号-通配符&quot;&gt;&lt;a href=&quot;#8-1-
      
    
    </summary>
    
      <category term="MySQL必知必会笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat开启gzip压缩</title>
    <link href="https://lengmuyun.github.io/2018/04/04/Tomcat%E5%BC%80%E5%90%AFgzip%E5%8E%8B%E7%BC%A9/"/>
    <id>https://lengmuyun.github.io/2018/04/04/Tomcat开启gzip压缩/</id>
    <published>2018-04-04T13:16:20.000Z</published>
    <updated>2018-04-04T13:21:15.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、原理介绍"><a href="#一、原理介绍" class="headerlink" title="一、原理介绍"></a>一、原理介绍</h3><p>HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求服务器对应资源后，从服务器端将资源文件压缩，再输出到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程HTML ,CSS,Javascript , Text ，它可以节省40%左右的流量。更为重要的是，它可以对动态生成的，包括CGI、PHP , JSP , ASP , Servlet,SHTML等输出的网页也能进行压缩，压缩效率也很高。</p><h3 id="二、Tomcat配置"><a href="#二、Tomcat配置" class="headerlink" title="二、Tomcat配置"></a>二、Tomcat配置</h3><p>编辑tomcat目录下的conf/server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>改为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">compression</span>=<span class="string">"on"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">noCompressionUserAgents</span>=<span class="string">"gozilla, traviata"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">compressableMimeType</span>=<span class="string">"text/html,text/javascript,text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>参数说明:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compression="on" 打开压缩功能。</span><br><span class="line">compressionMinSize="2048" 启用压缩的输出内容大小，这里面默认为2KB。</span><br><span class="line">noCompressionUserAgents="gozilla, traviata" 对于这些浏览器，不启用压缩。</span><br><span class="line">compressableMimeType="text/html,text/xml" 压缩类型。</span><br><span class="line">URIEncoding="UTF-8" 设置编码为UTF-8。</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>对同一个接口，开启gzip压缩和不开启gzip压缩进行测试，不开启gzip，接收数据1.5MB，而开启gzip压缩后接收数据86.4KB，压缩率94%</p><p><img src="https://lengmuyun.github.io/uploads/pic-gzip.png" alt="image"></p><p><img src="https://lengmuyun.github.io/uploads/pic-withoutgzip.png" alt="image"></p><p>参考链接:</p><p><a href="https://blog.csdn.net/qing_gee/article/details/51538598" target="_blank" rel="noopener">https://blog.csdn.net/qing_gee/article/details/51538598</a></p><p><a href="https://my.oschina.net/refresh/blog/90986" target="_blank" rel="noopener">https://my.oschina.net/refresh/blog/90986</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、原理介绍&quot;&gt;&lt;a href=&quot;#一、原理介绍&quot; class=&quot;headerlink&quot; title=&quot;一、原理介绍&quot;&gt;&lt;/a&gt;一、原理介绍&lt;/h3&gt;&lt;p&gt;HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求服务器对应资源后，从服务器端将资源文件压缩
      
    
    </summary>
    
    
  </entry>
  
</feed>
