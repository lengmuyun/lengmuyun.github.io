<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lengmuyun&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lengmuyun.github.io/"/>
  <updated>2020-06-06T05:07:59.433Z</updated>
  <id>https://lengmuyun.github.io/</id>
  
  <author>
    <name>lengmuyun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLocal应用及源码解析</title>
    <link href="https://lengmuyun.github.io/2020/06/06/ThreadLocal%E5%BA%94%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://lengmuyun.github.io/2020/06/06/ThreadLocal%E5%BA%94%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2020-06-05T23:51:18.000Z</published>
    <updated>2020-06-06T05:07:59.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>类<code>ThreadLocal</code>提供线程本地变量。它与普通变量的区别在于，在不同的线程访问<code>ThreadLocal</code>(通过<code>get</code>或<code>set</code>方法)拥有自己的独立副本。<code>ThreadLocal</code>实例一般用<code>private static</code>修饰。</p></blockquote><h3 id="1-ThreadLocal用法"><a href="#1-ThreadLocal用法" class="headerlink" title="1.ThreadLocal用法"></a>1.ThreadLocal用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (1) 创建线程变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// (2) 设置线程变量</span></span><br><span class="line">        threadLocal.set(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="comment">// (3) 启动子线程</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// (4) 子线程输出变量的值</span></span><br><span class="line">            System.out.println(<span class="string">"thread: "</span> + threadLocal.get());</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (5) 主线程输出线程变量的值</span></span><br><span class="line">        System.out.println(<span class="string">"main: "</span> + threadLocal.get());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例代码运行输出内容为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main: hello world</span><br><span class="line">thread: null</span><br></pre></td></tr></table></figure><p>代码(2)处设置了主线程的ThreadLocal副本值为hello world，故代码(5)输出为main: hello world;<br>代码(4)处输出子线程中ThreadLocal副本值，因为在子线程中未进行设置，故输出thread: null。</p><h3 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-set方法执行流程"><a href="#2-1-set方法执行流程" class="headerlink" title="2.1 set方法执行流程"></a>2.1 set方法执行流程</h4><p><a href="https://imgchr.com/i/tybFgA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/06/tybFgA.png" alt="tybFgA.png"></a></p><h4 id="2-2-get方法执行流程"><a href="#2-2-get方法执行流程" class="headerlink" title="2.2 get方法执行流程"></a>2.2 get方法执行流程</h4><p><img src="http://img3.coin163.com/75/34/6VJvaq.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;类&lt;code&gt;ThreadLocal&lt;/code&gt;提供线程本地变量。它与普通变量的区别在于，在不同的线程访问&lt;code&gt;ThreadLocal&lt;/code&gt;(通过&lt;code&gt;get&lt;/code&gt;或&lt;code&gt;set&lt;/code&gt;方法)拥有自己的独立
      
    
    </summary>
    
    
    
      <category term="多线程" scheme="https://lengmuyun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用validation校验参数</title>
    <link href="https://lengmuyun.github.io/2020/05/19/SpringBoot%E4%BD%BF%E7%94%A8validation%E6%A0%A1%E9%AA%8C%E5%8F%82%E6%95%B0/"/>
    <id>https://lengmuyun.github.io/2020/05/19/SpringBoot%E4%BD%BF%E7%94%A8validation%E6%A0%A1%E9%AA%8C%E5%8F%82%E6%95%B0/</id>
    <published>2020-05-19T14:24:38.000Z</published>
    <updated>2020-05-21T13:23:19.943Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当涉及校验用户输入时，如果由开发人员编码校验数据，那么验证数据的代码和业务逻辑代码会耦合在一起。Spring Framework 4.0支持Bean Validation 1.0(JSR-303)和Bean Validation 1.1(JSR-349)，也将其改写成了Spring的Validator接口。使用Spring Validation可以方便的进行数据校验。</p></blockquote><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-实体类中添加校验注解"><a href="#2-实体类中添加校验注解" class="headerlink" title="2.实体类中添加校验注解"></a>2.实体类中添加校验注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lmy.springbootinaction.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.lmy.springbootinaction.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Range;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"用户名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Range</span>(min = <span class="number">0</span>, max = <span class="number">150</span>, message = <span class="string">"年龄格式不正确"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式不正确"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"邮箱不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1(3|4|5|7|8)\\d&#123;9&#125;$"</span>, message = <span class="string">"手机号码格式不正确"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"手机号不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在Controller层校验数据"><a href="#3-在Controller层校验数据" class="headerlink" title="3.在Controller层校验数据"></a>3.在Controller层校验数据</h3><blockquote><p>对需要校验的参数添加注解@Valid或@Validated，如果需要获取校验的信息，可以在被校验参数后面添加一个BindingResult参数，Spring会将校验的信息填充到该校验参数后面的BindingResult中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lmy.springbootinaction.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.lmy.springbootinaction.request.LoginRequest;</span><br><span class="line"><span class="keyword">import</span> io.github.lmy.springbootinaction.request.UserRequest;</span><br><span class="line"><span class="keyword">import</span> io.github.lmy.springbootinaction.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(@Valid @RequestBody UserRequest userRequest, BindingResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (FieldError fieldError : result.getFieldErrors()) &#123;</span><br><span class="line">                log.info(<span class="string">"field: &#123;&#125;, message: &#123;&#125;"</span>, fieldError.getField(), fieldError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> success = userService.register(userRequest);</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@Validated @RequestBody LoginRequest loginRequest)</span> </span>&#123;</span><br><span class="line">        userService.login(loginRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-校验失败统一处理"><a href="#4-校验失败统一处理" class="headerlink" title="4.校验失败统一处理"></a>4.校验失败统一处理</h3><blockquote><p>如果校验参数后没有BindingResult参数，且校验参数校验失败，则会抛出<em>MethodArgumentNotValidException</em> 异常。可以使用 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="noopener"><em>@ExceptionHandler</em></a> 注解统一处理参数校验失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lmy.springbootinaction.global;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; <span class="title">handleValidationExceptions</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; result = ex.getBindingResult()</span><br><span class="line">                .getFieldErrors()</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接:</p><ul><li><a href="https://www.cnkirito.moe/spring-validation/" target="_blank" rel="noopener">使用 spring validation 完成数据后端校验</a></li><li><a href="https://www.cnblogs.com/gdufs/p/10964771.html" target="_blank" rel="noopener">SpringBoot 参数校验</a></li><li><a href="https://www.baeldung.com/spring-boot-bean-validation" target="_blank" rel="noopener">Validation in Spring Boot</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;当涉及校验用户输入时，如果由开发人员编码校验数据，那么验证数据的代码和业务逻辑代码会耦合在一起。Spring Framework 4.0支持Bean Validation 1.0(JSR-303)和Bean Validation 1.1(JSR-3
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://lengmuyun.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://lengmuyun.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>try-with-resource</title>
    <link href="https://lengmuyun.github.io/2019/10/09/try-with-resource/"/>
    <id>https://lengmuyun.github.io/2019/10/09/try-with-resource/</id>
    <published>2019-10-09T14:36:41.000Z</published>
    <updated>2019-10-11T14:46:12.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java7引入<code>try-with-resource</code>语法，允许在<code>try</code>代码块声明一个或多个资源，可以确保代码块执行完毕资源被关闭。</p></blockquote><h3 id="1-使用try-catch-finally"><a href="#1-使用try-catch-finally" class="headerlink" title="1.使用try-catch-finally"></a>1.使用try-catch-finally</h3><p>在java7之前，我们需要在<code>finally</code>代码块来关闭资源，确保程序即使在<code>try</code>发生异常，资源也能正确的被关闭。</p><p>以下的例子，从硬盘中读取文件file.txt的内容，输出至控制台。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryCatchFinally</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"D://Resource/file.txt"</span>)));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用try-with-resource替代"><a href="#2-使用try-with-resource替代" class="headerlink" title="2.使用try-with-resource替代"></a>2.使用try-with-resource替代</h3><p>从java7开始，你可以使用<code>try-with-resource</code>来替代<code>try-catch-finally</code>，简化代码。资源对象需要在<code>try</code>代码块中被声明和初始化，这样资源就会被自动的关闭。</p><p><code>try-with-resource</code>语法使用的时候需要注意以下几点：</p><ul><li><code>try()</code>代码块中可以声明一个或多个resource(resource是指那些实现了java.lang.AutoCloseable或java.io.Closeable的对象)，多个资源用分号分割</li><li><code>try-with-resource</code>语法会自动处理资源的关闭，资源关闭的顺序跟声明的顺序相反</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryWithResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"D://Resource/file.txt"</span>)))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-从字节码查看try-with-resource"><a href="#3-从字节码查看try-with-resource" class="headerlink" title="3.从字节码查看try-with-resource"></a>3.从字节码查看try-with-resource</h3><p>使用jd-gui查看方法<code>testTryWithResource</code>生成的字节码，可以看到<code>try-with-resource</code>主要做了一下2点处理</p><ul><li>在<code>finally</code>代码块中执行了资源的关闭</li><li>如果在<code>try</code>代码块和<code>finally</code>代码块中都发生了异常，则会抛出<code>try</code>代码块捕获的异常，并抑制了<code>finally</code>代码块中异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryWithResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"D://Resource/file.txt"</span>)));Throwable localThrowable3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable localThrowable1) &#123;</span><br><span class="line">            localThrowable3 = localThrowable1;<span class="keyword">throw</span> localThrowable1;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (localThrowable3 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        br.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable localThrowable2) &#123;</span><br><span class="line">                        localThrowable3.addSuppressed(localThrowable2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接:</p><ul><li><p><a href="https://www.baeldung.com/java-try-with-resources" target="_blank" rel="noopener">Java – Try with Resources</a></p></li><li><p><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noopener">The Java™ Tutorials</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;java7引入&lt;code&gt;try-with-resource&lt;/code&gt;语法，允许在&lt;code&gt;try&lt;/code&gt;代码块声明一个或多个资源，可以确保代码块执行完毕资源被关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-使用try-
      
    
    </summary>
    
    
      <category term="java" scheme="https://lengmuyun.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7安装MySQL</title>
    <link href="https://lengmuyun.github.io/2019/04/30/CentOS7%E5%AE%89%E8%A3%85MySQL/"/>
    <id>https://lengmuyun.github.io/2019/04/30/CentOS7%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2019-04-30T12:50:16.000Z</published>
    <updated>2020-06-06T08:31:41.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-配置YUM源"><a href="#1-配置YUM源" class="headerlink" title="1.配置YUM源"></a>1.配置YUM源</h3><ul><li>1.1 下载YUM源rpm安装包</li></ul><p>在MySQL官网中下载YUM源rpm安装包：<a href="http://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/repo/yum/</a></p><ul><li>1.2 安装mysql源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>1.3 检查mysql源是否安装成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep "mysql.*-community.*"</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/06/06/t6ByXn.png" alt="t6ByXn.png"></p><p>看到上图所示表示安装成功。</p><ul><li>1.4 修改默认安装的mysql版本</li></ul><p>当前文件的mysql版本为5.6，若要改为5.7，则将5.7的enabled改为1，将5.6的enabled改为0即可。</p><p><img src="https://s1.ax1x.com/2020/06/06/t6Bcmq.png" alt="t6Bcmq.png">  </p><h3 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2.安装MySQL"></a>2.安装MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h3 id="3-启动MySQL"><a href="#3-启动MySQL" class="headerlink" title="3.启动MySQL"></a>3.启动MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动MySQL</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看MySQL启动状态</span></span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/06/06/t6Bg00.png" alt="t6Bg00.png"></p><h3 id="4-修改root用户密码"><a href="#4-修改root用户密码" class="headerlink" title="4.修改root用户密码"></a>4.修改root用户密码</h3><ul><li>4.1 直接输入mysql就可以进入MySQL了</li><li>4.2 修改root用户密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password &#x3D; password(&#39;root&#39;);</span><br></pre></td></tr></table></figure><h3 id="5-开启用户远程访问"><a href="#5-开启用户远程访问" class="headerlink" title="5.开启用户远程访问"></a>5.开启用户远程访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.*TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="6-开放3306端口"><a href="#6-开放3306端口" class="headerlink" title="6.开放3306端口"></a>6.开放3306端口</h3><p>开启端口后，可以在外部使用mysql连接工具连接，具体操作如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在running状态下，向firewall添加需要开放的端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载配置，使得修改有效</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看开启的端口，出现3306/tcp则开启正确</span></span><br><span class="line">firewall-cmd --permanent --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>参考链接:</p><ul><li><p><a href="https://blog.csdn.net/xyang81/article/details/51759200" target="_blank" rel="noopener">MySQL5.7安装与配置（YUM）</a></p></li><li><p><a href="https://blog.csdn.net/chensongmol/article/details/78772027" target="_blank" rel="noopener">CentOS之Mysql已经开放了3306端口，外网访问不上</a></p></li><li><p><a href="https://www.cnblogs.com/yyhh/p/5062153.html#P02" target="_blank" rel="noopener">Linux下安装MySQL</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-配置YUM源&quot;&gt;&lt;a href=&quot;#1-配置YUM源&quot; class=&quot;headerlink&quot; title=&quot;1.配置YUM源&quot;&gt;&lt;/a&gt;1.配置YUM源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.1 下载YUM源rpm安装包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在MySQL官网中
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://lengmuyun.github.io/categories/CentOS/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7安装Tomcat</title>
    <link href="https://lengmuyun.github.io/2019/04/27/CentOS7%E5%AE%89%E8%A3%85Tomcat/"/>
    <id>https://lengmuyun.github.io/2019/04/27/CentOS7%E5%AE%89%E8%A3%85Tomcat/</id>
    <published>2019-04-26T23:19:00.000Z</published>
    <updated>2020-06-06T08:36:35.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-检查JDK环境"><a href="#1-检查JDK环境" class="headerlink" title="1.检查JDK环境"></a>1.检查JDK环境</h3><p>通过java -version命令检查系统是否安装JDK</p><p><img src="https://s1.ax1x.com/2020/06/06/t6raRg.png" alt="t6raRg.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="2-下载Tomcat及安装"><a href="#2-下载Tomcat及安装" class="headerlink" title="2.下载Tomcat及安装"></a>2.下载Tomcat及安装</h3><ul><li><p>2.1 去<a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">Apache Tomcat官网</a>下载Tomcat9</p></li><li><p>2.2 使用WinSCP上传安装包至/usr/local/目录下</p></li><li><p>2.3 安装tomcat</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩包</span></span><br><span class="line">tar -zxvf apache-tomcat-9.0.19.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除压缩包</span></span><br><span class="line">rm apache-tomcat-9.0.19.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv apache-tomcat-9.0.19 tomcat-9.0.19</span><br></pre></td></tr></table></figure><h3 id="3-启动Tomcat"><a href="#3-启动Tomcat" class="headerlink" title="3.启动Tomcat"></a>3.启动Tomcat</h3><ul><li>3.1 启动tomcat</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat-9.0.19/bin/startup.sh</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/06/06/t6rdzQ.png" alt="t6rdzQ.png"></p><ul><li>3.2 查看tomcat进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep java</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/06/06/t6rUJS.png" alt="t6rUJS.png"></p><ul><li>3.3 查看tomcat欢迎页</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080</span><br></pre></td></tr></table></figure><h3 id="4-配置端口"><a href="#4-配置端口" class="headerlink" title="4.配置端口"></a>4.配置端口</h3><p>在linux上开启的tomcat使用浏览器访问不了。<br>主要原因在于防火墙的存在，导致的端口无法访问。<br>CentOS7使用firewall而不是iptables。所以解决这类问题可以通过添加firewall的端口，使其对我们需要用的端口开放。</p><ul><li>4.1 查看防火墙状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><ul><li>4.2 在running 状态下，向firewall 添加需要开放的端口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 永久的添加该端口。去掉--permanent则表示临时。</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br></pre></td></tr></table></figure><ul><li>4.3 加载配置，使得修改有效</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>4.4 查看开启的端口，出现8080/tcp则开启正确</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --list-ports</span><br></pre></td></tr></table></figure><ul><li>4.5 端口添加完后可以外部浏览器访问</li></ul><p><img src="https://s1.ax1x.com/2020/06/06/t6r0Mj.png" alt="t6r0Mj.png"></p><p>参考链接:</p><ul><li><p><a href="https://segmentfault.com/a/1190000012893316" target="_blank" rel="noopener">centos7.4安装jdk1.8及tomcat8.5</a></p></li><li><p><a href="https://www.cnblogs.com/lrx931028/p/9140085.html" target="_blank" rel="noopener">CentOS7上解决tomcat不能被外部浏览访问</a></p></li><li><p><a href="https://www.zhuqiming.cn/install-tomcat8.html" target="_blank" rel="noopener">CentOS 7 安装 Tomcat 8 的方法</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-检查JDK环境&quot;&gt;&lt;a href=&quot;#1-检查JDK环境&quot; class=&quot;headerlink&quot; title=&quot;1.检查JDK环境&quot;&gt;&lt;/a&gt;1.检查JDK环境&lt;/h3&gt;&lt;p&gt;通过java -version命令检查系统是否安装JDK&lt;/p&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://lengmuyun.github.io/categories/CentOS/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7安装JDK8</title>
    <link href="https://lengmuyun.github.io/2019/04/20/CentOS7%E5%AE%89%E8%A3%85JDK8/"/>
    <id>https://lengmuyun.github.io/2019/04/20/CentOS7%E5%AE%89%E8%A3%85JDK8/</id>
    <published>2019-04-20T01:39:08.000Z</published>
    <updated>2020-06-06T08:38:01.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载JDK"><a href="#1-下载JDK" class="headerlink" title="1.下载JDK"></a>1.下载JDK</h3><p>去<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle官网</a>下载JDK8，根据CentOS的版本下载对应的32位或64位安装包。</p><ul><li>查看CentOS是32位还是64位可以用以下命令（如果有x86_64就是64位的，没有就是32位的；后面是X686或X86_64则内核是64位的，i686或i386则内核是32位的）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname <span class="literal">-a</span> <span class="comment"># 用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）</span></span><br></pre></td></tr></table></figure><ul><li>在centos系统中执行uname -a指令，系统为64位，下载文件jdk-8u211-linux-x64.tar.gz</li></ul><p><img src="https://s1.ax1x.com/2020/06/06/t6snwq.png" alt="t6snwq.png"></p><h3 id="2-传输文件及解压"><a href="#2-传输文件及解压" class="headerlink" title="2.传输文件及解压"></a>2.传输文件及解压</h3><ul><li><p>2.1 在/usr/local/下建立java文件夹，使用WinSCP上传jdk至java文件夹里面</p></li><li><p>2.2 解压文件</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> jdk<span class="literal">-8u211</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br></pre></td></tr></table></figure><ul><li>2.3 删除压缩包</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm jdk<span class="literal">-8u211</span><span class="literal">-linux</span><span class="literal">-x64</span>.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h3><ul><li>3.1 修改/etc/profile文件</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><ul><li>3.2 在文件末尾追加以下内容</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置JAVA_HOME环境变量</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_211</span><br><span class="line"><span class="comment"># 在PATH路径上追加$JAVA_HOME/bin目录</span></span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 配置CLASSPATH，tools.jar用于编译，dt.jar是Swing需要用到的</span></span><br><span class="line"><span class="comment"># 如果CLASSPATH中不包括当前路径.，JRE就不会在当前路径下搜索Java类</span></span><br><span class="line">export CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure><ul><li>3.3 使文件修改生效</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># source命令也称为“点命令”，也就是一个点符号（.）,是bash的内部命令。 source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="4-查看安装jdk是否成功"><a href="#4-查看安装jdk是否成功" class="headerlink" title="4.查看安装jdk是否成功"></a>4.查看安装jdk是否成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>参考链接:</p><ul><li><p><a href="https://segmentfault.com/a/1190000012893316" target="_blank" rel="noopener">centos7.4安装jdk1.8及tomcat8.5</a></p></li><li><p><a href="https://juejin.im/entry/57df5deca0bb9f0058a4c397" target="_blank" rel="noopener">Java 环境变量你真的明白吗？</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-下载JDK&quot;&gt;&lt;a href=&quot;#1-下载JDK&quot; class=&quot;headerlink&quot; title=&quot;1.下载JDK&quot;&gt;&lt;/a&gt;1.下载JDK&lt;/h3&gt;&lt;p&gt;去&lt;a href=&quot;https://www.oracle.com/technetwork/java/
      
    
    </summary>
    
    
      <category term="CentOS" scheme="https://lengmuyun.github.io/categories/CentOS/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL操作数据表的记录</title>
    <link href="https://lengmuyun.github.io/2019/03/30/MySQL%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <id>https://lengmuyun.github.io/2019/03/30/MySQL%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E8%AE%B0%E5%BD%95/</id>
    <published>2019-03-30T10:11:19.000Z</published>
    <updated>2019-03-30T10:12:01.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>INSERT</p></blockquote><ul><li>标准插入语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name [(col_name,...)] &#123;<span class="keyword">VALUES</span>|<span class="keyword">VALUE</span>&#125; (&#123;expr|<span class="keyword">DEFAULT</span>&#125;,...),(...),...</span><br></pre></td></tr></table></figure><ul><li>可以使用子查询，但是不能插入多条记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name <span class="keyword">SET</span> col_name=&#123;expr|<span class="keyword">DEFAULT</span>&#125;,...</span><br></pre></td></tr></table></figure><ul><li>可以将查询结果插入到指定数据表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name [(col_name,...)] <span class="keyword">SELECT</span> ...</span><br></pre></td></tr></table></figure><blockquote><p>UPDATE</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">IGNORE</span>] table_reference <span class="keyword">SET</span> col_name1=&#123;expr1|<span class="keyword">DEFAULT</span>&#125; [,col_name2=&#123;expr2|<span class="keyword">DEFAULT</span>&#125;] ... [<span class="keyword">WHERE</span> where_condition]</span><br></pre></td></tr></table></figure><blockquote><p>DELETE</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tbl_name [WHERE where_condition]</span><br></pre></td></tr></table></figure><blockquote><p>SELECT</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT select_expr [,select_expr ...]</span><br><span class="line">[</span><br><span class="line">    FROM table_references</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [GROUP BY &#123;col_name|position&#125; [ASC|DESC], ...]</span><br><span class="line">    [HAVING where_condition]</span><br><span class="line">    [ORDER BY &#123;col_name|expr|position&#125; [ASC|DESC], ...]</span><br><span class="line">    [LIMIT &#123;[offset,] row_count&#125;|row_count OFFSET offset]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>查询表达式(select_expr)</li></ul><blockquote><p>每一个表达式表示想要的一列，必须有至少一个。</p><p>多个列之间以英文逗号分隔。</p><p>星号(*)表示所有列。tbl_name. *可以表示命名表的所有列。</p><p>查询表达式可以用[AS] alias_name为其赋予别名。</p><p>别名可用于GROUP BY, ORDER BY或HAVING字句。</p></blockquote><ul><li>WHERE条件表达式</li></ul><blockquote><p>对记录进行过滤，如果没有指定WHERE子句，则显示所有记录。</p><p>在WHERE表达式中，可以使用MySQL支持的函数或运算符。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;INSERT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;标准插入语法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="MySQL笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL约束以及修改数据表</title>
    <link href="https://lengmuyun.github.io/2019/03/24/MySQL%E7%BA%A6%E6%9D%9F%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    <id>https://lengmuyun.github.io/2019/03/24/MySQL%E7%BA%A6%E6%9D%9F%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E8%A1%A8/</id>
    <published>2019-03-24T13:43:18.000Z</published>
    <updated>2019-03-30T11:02:04.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li>1.约束保证数据的完整性和一致性。</li><li>2.约束分为表级约束和列级约束。</li><li>3.约束类型包括：<br>NOT NULL(非空约束)<br>PRIMARY KEY(主键约束)<br>UNIQUE KEY(唯一约束)<br>DEFAULT(默认约束)<br>FOREIGN KEY(外键约束)<h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4></li></ul><blockquote><p>保证数据一致性，完整性。<br>实现一对一或一对多关系。</p></blockquote><ul><li>外键约束的要求</li></ul><blockquote><p>1.父表和子表必须使用相同的存储引擎，而且禁止使用临时表。<br>2.数据表的存储引擎只能为InnoDB。<br>3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同。<br>4.外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引。</p></blockquote><ul><li>编辑数据表的默认存储引擎</li></ul><blockquote><p>MySQL配置文件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><ul><li>外键约束的参照操作</li></ul><table><thead><tr><th align="center">参考操作</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">CASCADE</td><td align="center">从父表删除或更新且自动删除或更新子表中匹配的行</td></tr><tr><td align="center">SET NULL</td><td align="center">从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL</td></tr><tr><td align="center">RESTRICT</td><td align="center">拒绝对父表的删除或更新操作</td></tr><tr><td align="center">NO ACTION</td><td align="center">标准SQL的关键字，在MySQL中与RESTRICT相同</td></tr></tbody></table><ul><li>表级约束与列级约束</li></ul><blockquote><p>对一个数据列建立的约束，称为列级约束。<br>对多个数据列建立的约束，称为表级约束。<br>列级约束既可以在列定义时声明，也可以在列定义后声明。<br>表级约束只能在列定义后声明。</p></blockquote><ul><li>修改数据表</li></ul><blockquote><p>添加单列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] col_name column_definition [<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> col_name]</span><br></pre></td></tr></table></figure><blockquote><p>添加多列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] (col_name column_definition,...)</span><br></pre></td></tr></table></figure><blockquote><p>删除列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] col_name</span><br></pre></td></tr></table></figure><blockquote><p>对某张表执行多个动作，如删除多列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] col_name, <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] col_name</span><br></pre></td></tr></table></figure><blockquote><p>添加主键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>[symbol]] PRIMARY <span class="keyword">KEY</span> [index_type] (index_col_name,...)</span><br></pre></td></tr></table></figure><blockquote><p>添加唯一约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>[symbol]] <span class="keyword">UNIQUE</span> [<span class="keyword">INDEX</span>|<span class="keyword">KEY</span>] [index_name] [index_type] (index_col_name,...)</span><br></pre></td></tr></table></figure><blockquote><p>添加外键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>[symbol]] <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> [index_name] (index_col_name) <span class="keyword">REFERENCES</span> tbl_name (col_namme)</span><br></pre></td></tr></table></figure><blockquote><p>添加或删除默认约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] col_name &#123;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span> literal|<span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除主键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure><blockquote><p>删除唯一约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> &#123;<span class="keyword">INDEX</span>|<span class="keyword">KEY</span>&#125; index_name</span><br></pre></td></tr></table></figure><blockquote><p>删除外键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_symbol</span><br></pre></td></tr></table></figure><blockquote><p>修改列定义</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">MODIFY</span> [<span class="keyword">COLUMN</span>] col_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name]</span><br></pre></td></tr></table></figure><blockquote><p>修改列名称</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] old_col_name new_col_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name]</span><br></pre></td></tr></table></figure><blockquote><p>修改表名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">RENAME</span> [<span class="keyword">TO</span>|<span class="keyword">AS</span>] new_tbl_name</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">TO</span> new_tbl_name [,tbl_name2 <span class="keyword">TO</span> new_tbl_name2]...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;约束&quot;&gt;&lt;a href=&quot;#约束&quot; class=&quot;headerlink&quot; title=&quot;约束&quot;&gt;&lt;/a&gt;约束&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.约束保证数据的完整性和一致性。&lt;/li&gt;
&lt;li&gt;2.约束分为表级约束和列级约束。&lt;/li&gt;
&lt;li&gt;3.约束类型包括：&lt;b
      
    
    </summary>
    
    
      <category term="MySQL笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL操作数据表与约束</title>
    <link href="https://lengmuyun.github.io/2019/03/24/MySQL%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%8E%E7%BA%A6%E6%9D%9F/"/>
    <id>https://lengmuyun.github.io/2019/03/24/MySQL%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%8E%E7%BA%A6%E6%9D%9F/</id>
    <published>2019-03-24T05:10:06.000Z</published>
    <updated>2019-03-24T13:39:50.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MySQL操作数据表"><a href="#1-MySQL操作数据表" class="headerlink" title="1. MySQL操作数据表"></a>1. MySQL操作数据表</h3><h4 id="1-1-创建数据表"><a href="#1-1-创建数据表" class="headerlink" title="1.1 创建数据表"></a>1.1 创建数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name (</span><br><span class="line">column_name data_type,</span><br><span class="line">...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="1-2-查看数据表列表"><a href="#1-2-查看数据表列表" class="headerlink" title="1.2 查看数据表列表"></a>1.2 查看数据表列表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> [<span class="keyword">FROM</span> db_name] [<span class="keyword">LIKE</span> <span class="string">'pattern'</span> | <span class="keyword">WHERE</span> expr]</span><br></pre></td></tr></table></figure><h4 id="1-3-查看数据表结构"><a href="#1-3-查看数据表结构" class="headerlink" title="1.3 查看数据表结构"></a>1.3 查看数据表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> tbl_name;</span><br></pre></td></tr></table></figure><h4 id="1-4-插入记录"><a href="#1-4-插入记录" class="headerlink" title="1.4 插入记录"></a>1.4 插入记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name [(col_name,...)] <span class="keyword">VALUES</span>(val,...);</span><br></pre></td></tr></table></figure><h4 id="1-5-记录查找"><a href="#1-5-记录查找" class="headerlink" title="1.5 记录查找"></a>1.5 记录查找</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expr,... <span class="keyword">FROM</span> tbl_name;</span><br></pre></td></tr></table></figure><h3 id="2-MySQL约束"><a href="#2-MySQL约束" class="headerlink" title="2. MySQL约束"></a>2. MySQL约束</h3><h4 id="2-1-空值与非空"><a href="#2-1-空值与非空" class="headerlink" title="2.1 空值与非空"></a>2.1 空值与非空</h4><blockquote><p>NULL, 字段值可以为空<br>NOT NULL,字段值禁止为空</p></blockquote><h4 id="2-2-AUTO-INCREMENT"><a href="#2-2-AUTO-INCREMENT" class="headerlink" title="2.2 AUTO_INCREMENT"></a>2.2 AUTO_INCREMENT</h4><blockquote><p>自动编号，且必须与主键组合使用<br>默认情况下，起始值为1，每次增量为1</p></blockquote><h4 id="2-3-主键约束-PRIMARY-KEY"><a href="#2-3-主键约束-PRIMARY-KEY" class="headerlink" title="2.3 主键约束(PRIMARY KEY)"></a>2.3 主键约束(PRIMARY KEY)</h4><blockquote><p>每张数据表只能存在一个主键<br>主键保证记录的唯一性<br>主键自动为NOT NULL</p></blockquote><h4 id="2-4-唯一约束-UNIQUE-KEY"><a href="#2-4-唯一约束-UNIQUE-KEY" class="headerlink" title="2.4 唯一约束(UNIQUE KEY)"></a>2.4 唯一约束(UNIQUE KEY)</h4><blockquote><p>唯一约束可以保证记录的唯一性<br>唯一约束的字段可以为空值(NULL)<br>每张数据表可以存在多个唯一约束</p></blockquote><h4 id="2-5-默认值-DEFAULT"><a href="#2-5-默认值-DEFAULT" class="headerlink" title="2.5 默认值(DEFAULT)"></a>2.5 默认值(DEFAULT)</h4><blockquote><p>当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-MySQL操作数据表&quot;&gt;&lt;a href=&quot;#1-MySQL操作数据表&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL操作数据表&quot;&gt;&lt;/a&gt;1. MySQL操作数据表&lt;/h3&gt;&lt;h4 id=&quot;1-1-创建数据表&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
      <category term="MySQL笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据类型</title>
    <link href="https://lengmuyun.github.io/2019/03/23/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lengmuyun.github.io/2019/03/23/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2019-03-23T13:49:58.000Z</published>
    <updated>2019-03-23T13:50:45.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h3><blockquote><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。<br>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p></blockquote><hr><h4 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1.数值类型"></a>1.数值类型</h4><blockquote><p>MySQL支持所有标准SQL数值数据类型。<br>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。<br>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">大小(字节)</th><th align="center">范围(有符号)</th><th align="center">范围(无符号)</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1</td><td align="center">(-128，127)</td><td align="center">(0，255)</td></tr><tr><td align="center">SMALLINT</td><td align="center">2</td><td align="center">(-32 768，32 767)</td><td align="center">(0，65 535)</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3</td><td align="center">(-2^23，2^23-1)</td><td align="center">(0，2^24-1)</td></tr><tr><td align="center">INT</td><td align="center">4</td><td align="center">(-2^31，2^31-1)</td><td align="center">(0，2^32-1)</td></tr><tr><td align="center">BIGINT</td><td align="center">8</td><td align="center">(-2^63，2^63-1)</td><td align="center">(0，2^64-1)</td></tr><tr><td align="center">FLOAT[(M,D)]</td><td align="center">4</td><td align="center">M是数字总位数，D是小数点后面的位数。</td><td align="center"></td></tr><tr><td align="center">DOUBLE[(M,D)]</td><td align="center">8</td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="2-日期和时间类型"><a href="#2-日期和时间类型" class="headerlink" title="2.日期和时间类型"></a>2.日期和时间类型</h4><blockquote><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。<br>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。<br>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">大小(字节)</th><th align="center">范围</th><th align="center">格式</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01/9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">‘-838:59:59’/‘838:59:59’</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901/2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:00/2038</td><td align="center">结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="center">YYYYMMDD HHMMSS</td></tr></tbody></table><h4 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h4><blockquote><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">大小(字节)</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">0-255</td><td align="center">定长字符串</td></tr><tr><td align="center">VARCHAR</td><td align="center">0-65535</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYBLOB</td><td align="center">0-255</td><td align="center">不超过 255 个字符的二进制字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="center">0-65 535</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65 535</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">0-16 777 215</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16 777 215</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="center">0-4 294 967 295</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4 294 967 295</td><td align="center">极大文本数据</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL数据类型&quot;&gt;&lt;a href=&quot;#MySQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据类型&quot;&gt;&lt;/a&gt;MySQL数据类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;MySQL中定义数据字段的类型对你数据库的优化是非常重要的
      
    
    </summary>
    
    
      <category term="MySQL笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>初涉MySQL</title>
    <link href="https://lengmuyun.github.io/2019/03/22/%E5%88%9D%E6%B6%89MySQL/"/>
    <id>https://lengmuyun.github.io/2019/03/22/%E5%88%9D%E6%B6%89MySQL/</id>
    <published>2019-03-21T23:50:47.000Z</published>
    <updated>2019-03-24T05:12:22.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-MySQL概述"><a href="#1-1-MySQL概述" class="headerlink" title="1-1 MySQL概述"></a>1-1 MySQL概述</h3><blockquote><p>MySQL由瑞典MySQL AB公司开发，目前属于Oracle公司。</p><p>MySQL是一个开源的关系型数据库管理系统。</p><p>MySQL分为社区版和企业版。</p></blockquote><h3 id="1-3-启动与停止MySQL服务"><a href="#1-3-启动与停止MySQL服务" class="headerlink" title="1-3 启动与停止MySQL服务"></a>1-3 启动与停止MySQL服务</h3><ul><li>启动MySQL服务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> MySQL</span><br></pre></td></tr></table></figure><ul><li>关闭MySQL服务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">stop</span> MySQL</span><br></pre></td></tr></table></figure><h3 id="1-4-MySQL登陆与退出"><a href="#1-4-MySQL登陆与退出" class="headerlink" title="1-4 MySQL登陆与退出"></a>1-4 MySQL登陆与退出</h3><ul><li>MySQL登陆</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql 参数</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-D, –database=name</td><td align="center">打开指定数据库</td></tr><tr><td align="center">–delimiter=name</td><td align="center">指定分隔符</td></tr><tr><td align="center">-h, –host=name</td><td align="center">服务器名称</td></tr><tr><td align="center">-p, –password[=name]</td><td align="center">密码</td></tr><tr><td align="center">-P, –port=#</td><td align="center">端口号</td></tr><tr><td align="center">–prompt=name</td><td align="center">设置提示符</td></tr><tr><td align="center">-u, –user=name</td><td align="center">用户名</td></tr><tr><td align="center">-V, –version</td><td align="center">输出版本信息并且退出</td></tr></tbody></table><ul><li>MySQL退出</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br><span class="line">quit;</span><br><span class="line">\q;</span><br></pre></td></tr></table></figure><h3 id="1-5-修改MySQL提示符"><a href="#1-5-修改MySQL提示符" class="headerlink" title="1-5 修改MySQL提示符"></a>1-5 修改MySQL提示符</h3><ul><li><p>连接客户端时通过参数指定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot <span class="comment">--prompt 提示符</span></span><br></pre></td></tr></table></figure></li><li><p>连接上客户端后，通过prompt命令修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prompt 提示符</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\D</td><td align="center">完整的日期</td></tr><tr><td align="center">\d</td><td align="center">当前数据库</td></tr><tr><td align="center">\h</td><td align="center">服务器名称</td></tr><tr><td align="center">\u</td><td align="center">当前用户</td></tr></tbody></table><h3 id="1-6-MySQL常用命令以及语法规范"><a href="#1-6-MySQL常用命令以及语法规范" class="headerlink" title="1-6 MySQL常用命令以及语法规范"></a>1-6 MySQL常用命令以及语法规范</h3><ul><li>显示当前服务器版本</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br></pre></td></tr></table></figure><ul><li>显示当前日期时间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure><ul><li>显示当前用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure><ul><li>MySQL语句的规范</li></ul><blockquote><p>关键字与函数名称全部大写<br>数据库名称，表名称，字段名称全部小写<br>SQL语句必须以分号结尾</p></blockquote><h3 id="1-7-操作数据库"><a href="#1-7-操作数据库" class="headerlink" title="1-7 操作数据库"></a>1-7 操作数据库</h3><ul><li>创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> &#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125; [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name [<span class="keyword">DEFAULT</span>] <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> [=] charset_name</span><br></pre></td></tr></table></figure><ul><li>查看数据库列表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">DATABASES</span> | SCHEMAS&#125; [<span class="keyword">LIKE</span> <span class="string">'pattern'</span> | <span class="keyword">WHERE</span> expr]</span><br></pre></td></tr></table></figure><ul><li>查看警告</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">WARNINGS</span>;</span><br></pre></td></tr></table></figure><ul><li>查看建数据库语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_name;</span><br></pre></td></tr></table></figure><ul><li>修改数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125; [db_name]</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> [=] charset_name;</span><br></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125; [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] db_name；</span><br></pre></td></tr></table></figure><ul><li>打开数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> db_name;</span><br></pre></td></tr></table></figure><ul><li>查看打开的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-MySQL概述&quot;&gt;&lt;a href=&quot;#1-1-MySQL概述&quot; class=&quot;headerlink&quot; title=&quot;1-1 MySQL概述&quot;&gt;&lt;/a&gt;1-1 MySQL概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;MySQL由瑞典MySQL AB公司开发，
      
    
    </summary>
    
    
      <category term="MySQL笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>TCP三次握手四次挥手</title>
    <link href="https://lengmuyun.github.io/2019/01/06/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://lengmuyun.github.io/2019/01/06/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2019-01-06T06:45:04.000Z</published>
    <updated>2020-06-06T08:38:59.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-TCP报文首部"><a href="#1-TCP报文首部" class="headerlink" title="1.TCP报文首部"></a>1.TCP报文首部</h3><blockquote><p>TCP报文首部格式如下图所示</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/83c51503ly1fyx5sxvwnlj20i80chwf1.jpg" alt="image"></p><ul><li>序号，占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；</li><li>确认号，占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</li><li>确认ACK，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</li><li>同步SYN，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；</li><li>终止FIN，用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</li></ul><h3 id="2-TCP三次握手"><a href="#2-TCP三次握手" class="headerlink" title="2.TCP三次握手"></a>2.TCP三次握手</h3><ol><li>TCP客户进程向服务器发出连接请求报文，报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 <strong>SYN-SENT（同步已发送状态）状态</strong>。</li><li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了 <strong>SYN-RCVD（同步收到）状态</strong>。</li><li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入 <strong>ESTABLISHED（已建立连接）状态</strong>。当服务器收到客户端的确认后也进入 <strong>ESTABLISHED状态</strong>，此后双方就可以开始通信了。</li></ol><p><img src="https://ws1.sinaimg.cn/large/83c51503ly1fyx6b5ncppj20uz0en0te.jpg" alt="image"></p><h3 id="3-TCP四次挥手"><a href="#3-TCP四次挥手" class="headerlink" title="3.TCP四次挥手"></a>3.TCP四次挥手</h3><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入<strong>FIN-WAIT-1（终止等待1）状态</strong>。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。客户端收到服务器的确认请求后，此时，客户端就进入<strong>FIN-WAIT-2（终止等待2）状态</strong>，等待服务器发送连接释放报文</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了<strong>LAST-ACK（最后确认）状态</strong>，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了<strong>TIME-WAIT（时间等待）状态</strong>。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入<strong>CLOSED</strong>状态。服务器只要收到了客户端发出的确认，立即进入<strong>CLOSED</strong>状态。</li></ol><p><img src="https://ws1.sinaimg.cn/large/83c51503ly1fyx71lt4esj20tm0j0my8.jpg" alt="image"></p><p>参考链接:</p><p><a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="noopener">https://blog.csdn.net/qzcsu/article/details/72861891</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-TCP报文首部&quot;&gt;&lt;a href=&quot;#1-TCP报文首部&quot; class=&quot;headerlink&quot; title=&quot;1.TCP报文首部&quot;&gt;&lt;/a&gt;1.TCP报文首部&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TCP报文首部格式如下图所示&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
    
      <category term="http" scheme="https://lengmuyun.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域和内存溢出异常</title>
    <link href="https://lengmuyun.github.io/2018/07/01/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>https://lengmuyun.github.io/2018/07/01/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</id>
    <published>2018-07-01T14:34:01.000Z</published>
    <updated>2018-07-02T04:46:16.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-2-运行时数据区域"><a href="#2-2-运行时数据区域" class="headerlink" title="2.2 运行时数据区域"></a>2.2 运行时数据区域</h3><blockquote><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p></blockquote><p><img src="http://www.2cto.com/uploadfile/Collfiles/20161103/201611030932231070.jpg" alt="image"></p><h4 id="2-2-1-程序计数器"><a href="#2-2-1-程序计数器" class="headerlink" title="2.2.1 程序计数器"></a>2.2.1 程序计数器</h4><blockquote><p>程序计数器(Program Counter Register)是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。</p><p>在虚拟机的概念模型里(仅是概念模型，各种虚拟机的可能会通过一些更高效的方式去实现)，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></blockquote><h4 id="2-2-2-Java虚拟机栈"><a href="#2-2-2-Java虚拟机栈" class="headerlink" title="2.2.2 Java虚拟机栈"></a>2.2.2 Java虚拟机栈</h4><blockquote><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>局部变量表存放了编译期可知的各种基本数据类型(boolean，byte，char，short，int，float，long，double)、对象引用(reference类型，它不等同于对象本身，可能是一条指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址)。</p></blockquote><h4 id="2-2-3-本地方法栈"><a href="#2-2-3-本地方法栈" class="headerlink" title="2.2.3 本地方法栈"></a>2.2.3 本地方法栈</h4><blockquote><p>本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈是为虚拟机执行Java方法(也就是字节码)服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p></blockquote><h4 id="2-2-4-Java堆"><a href="#2-2-4-Java堆" class="headerlink" title="2.2.4 Java堆"></a>2.2.4 Java堆</h4><blockquote><p>所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</p><p>Java堆还可以细分为：新生代和老年代；再细致一点的有：Eden空间、From Survivor空间、To Survivor空间等。</p></blockquote><h4 id="2-2-5-方法区"><a href="#2-2-5-方法区" class="headerlink" title="2.2.5 方法区"></a>2.2.5 方法区</h4><blockquote><p>方法区(Method Area)与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p></blockquote><h4 id="2-2-6-运行时常量池"><a href="#2-2-6-运行时常量池" class="headerlink" title="2.2.6 运行时常量池"></a>2.2.6 运行时常量池</h4><blockquote><p>运行时常量池(Runtime Constant Pool)是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-2-运行时数据区域&quot;&gt;&lt;a href=&quot;#2-2-运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;2.2 运行时数据区域&quot;&gt;&lt;/a&gt;2.2 运行时数据区域&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Java虚拟机在执行Java程序的过程中会
      
    
    </summary>
    
    
      <category term="深入理解Java虚拟机笔记" scheme="https://lengmuyun.github.io/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>第九章-用正则表达式进行搜索</title>
    <link href="https://lengmuyun.github.io/2018/05/22/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2/"/>
    <id>https://lengmuyun.github.io/2018/05/22/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2/</id>
    <published>2018-05-21T23:46:31.000Z</published>
    <updated>2018-05-31T15:11:36.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-1-正则表达式介绍"><a href="#9-1-正则表达式介绍" class="headerlink" title="9.1 正则表达式介绍"></a>9.1 正则表达式介绍</h3><blockquote><p>正则表达式是用来匹配文本的特殊的串（字符集合）</p></blockquote><h3 id="9-2-使用MySQL正则表达式"><a href="#9-2-使用MySQL正则表达式" class="headerlink" title="9.2 使用MySQL正则表达式"></a>9.2 使用MySQL正则表达式</h3><blockquote><p>正则表达式的作用是匹配文本，将一个模式（正则表达式）与一个文本串进行比较。。MySQL用WHERE子句对正则表达式提供了初步的支持，允许你指定正则表达式，过滤SELECT检索出的数据。</p></blockquote><h4 id="9-2-1-基本字符匹配"><a href="#9-2-1-基本字符匹配" class="headerlink" title="9.2.1 基本字符匹配"></a>9.2.1 基本字符匹配</h4><ul><li>检索列prod_name包含文本1000的所有行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-进行OR匹配"><a href="#9-2-2-进行OR匹配" class="headerlink" title="9.2.2 进行OR匹配"></a>9.2.2 进行OR匹配</h4><blockquote><p>为搜索两个串之一（或者为这个串，或者为另一个串），使用|;</p><p>|为正则表达式的OR操作符;</p><p>使用|从功能上类似于在SELECT语句中使用OR语句，多个OR条件可并入单个正则表达式。</p></blockquote><ul><li>检索列prod_name包含1000或2000的所有行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1000|2000'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-3-匹配几个字符之一"><a href="#9-2-3-匹配几个字符之一" class="headerlink" title="9.2.3 匹配几个字符之一"></a>9.2.3 匹配几个字符之一</h4><blockquote><p>可通过指定一组用[和]括起来的字符来完成匹配特定的字符</p></blockquote><ul><li>[]是另一种形式的OR语句。正则表达式[123] Ton为[1|2|3] Ton的缩写，也可以使用后者</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[123] ton'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">prod_id</th><th align="center">prod_name</th></tr></thead><tbody><tr><td align="center">ANV02</td><td align="center">1 ton anvil</td></tr><tr><td align="center">ANV03</td><td align="center">2 ton anvil</td></tr></tbody></table><ul><li>除非把字符|括在一个集合中，否则它将应用于整个串</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'1|2|3 ton'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>1 ton anvil</td></tr><tr><td>2 ton anvil</td></tr><tr><td>JetPack 1000</td></tr><tr><td>JetPack 2000</td></tr><tr><td>TNT (1 stick)</td></tr></tbody></table><ul><li>字符集合也可以被否定，即，它们将匹配除指定字符外的任何东西。为否定一个字符集，在集合的开始处放置一个^即可。[^123]却匹配除这些字符外的任何东西。</li></ul><h4 id="9-2-4-匹配范围"><a href="#9-2-4-匹配范围" class="headerlink" title="9.2.4 匹配范围"></a>9.2.4 匹配范围</h4><blockquote><p>集合可用来定义要匹配的一个或多个字符。</p><p>下面的集合将匹配数字0到9：[0123456789]，等同于[0-9]；[a-z]匹配任意字母字符。</p></blockquote><ul><li>例子</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[1-5] ton'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-5-匹配特殊字符"><a href="#9-2-5-匹配特殊字符" class="headerlink" title="9.2.5 匹配特殊字符"></a>9.2.5 匹配特殊字符</h4><blockquote><p>正则表达式语言由具有特定含义的特殊字符构成。匹配这些字符.，[]，|和-应该怎么办</p><p>为了匹配特殊字符，必须用\为前导。\-表示查找-，\.表示查找.</p><p>正则表达式内具有特殊意义的所有字符都必须以这种方式转义。这包括.、|、[]以及迄今为止使用过的其他特殊字符。</p></blockquote><ul><li>找出包含.字符的值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">WHERE</span> vend_name REGEXP <span class="string">'.'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>vend_name</th></tr></thead><tbody><tr><td>Anvils R Us</td></tr><tr><td>LT Supplies</td></tr><tr><td>ACME</td></tr><tr><td>Furball Inc.</td></tr><tr><td>Jet Set</td></tr><tr><td>Jouets Et Ours</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name</span><br><span class="line"><span class="keyword">FROM</span> vendors</span><br><span class="line"><span class="keyword">WHERE</span> vend_name REGEXP <span class="string">'\\.'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>vend_name</th></tr></thead><tbody><tr><td>Furball Inc.</td></tr><tr><td>#### 9.2.6 匹配字符类</td></tr></tbody></table><blockquote><p>预定义的字符集，称为字符类（character class）。(见MySQL必知必会p58)</p></blockquote><h4 id="9-2-7-匹配多个实例"><a href="#9-2-7-匹配多个实例" class="headerlink" title="9.2.7 匹配多个实例"></a>9.2.7 匹配多个实例</h4><ul><li>表9-3 重复元字符</li></ul><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0个或多个匹配</td></tr><tr><td align="center">+</td><td align="center">1个或多个匹配(等于{1,})</td></tr><tr><td align="center">?</td><td align="center">0个或1个匹配(等于{0,1})</td></tr><tr><td align="center">{n}</td><td align="center">指定数目的匹配</td></tr><tr><td align="center">{n,}</td><td align="center">不少于指定数目的匹配</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配数目的范围(m不超过255)</td></tr></tbody></table><ul><li>[0-9]匹配任意数字（这个例子中为1和5），sticks?匹配stick和sticks（s后的?使s可选，因为?匹配它前面的任何字符的0次或1次出现），\)匹配)。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'\\([1-5] sticks?\\)'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>TNT (1 stick)</td></tr><tr><td>TNT (5 sticks)</td></tr></tbody></table><ul><li>[:digit:]匹配任意数字，{4}确切地要求它前面的字符（任意数字）出现4次，所以[[:digit:]]{4}匹配连在一起的任意4位数字。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'[[:digit:]]&#123;4&#125;'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><h4 id="9-2-8-定位符"><a href="#9-2-8-定位符" class="headerlink" title="9.2.8 定位符"></a>9.2.8 定位符</h4><ul><li>表9-4 定位元字符</li></ul><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">文本的开始</td></tr><tr><td align="center">$</td><td align="center">文本的结束</td></tr><tr><td align="center">[[:&lt;:]]</td><td align="center">词的开始</td></tr><tr><td align="center">[[:&gt;:]]</td><td align="center">词的结束</td></tr></tbody></table><ul><li>找出以一个数（包括以小数点开始的数）开始的所有产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name REGEXP <span class="string">'^[0-9\\.]'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>.5 ton anvil</td></tr><tr><td>1 ton anvil</td></tr><tr><td>2 ton anvil</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;9-1-正则表达式介绍&quot;&gt;&lt;a href=&quot;#9-1-正则表达式介绍&quot; class=&quot;headerlink&quot; title=&quot;9.1 正则表达式介绍&quot;&gt;&lt;/a&gt;9.1 正则表达式介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;正则表达式是用来匹配文本的特殊的串（字符集
      
    
    </summary>
    
    
      <category term="MySQL必知必会笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>第八章-用通配符进行过滤</title>
    <link href="https://lengmuyun.github.io/2018/05/22/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/"/>
    <id>https://lengmuyun.github.io/2018/05/22/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/</id>
    <published>2018-05-21T23:41:02.000Z</published>
    <updated>2018-05-31T15:03:35.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8-1-LIKE操作符"><a href="#8-1-LIKE操作符" class="headerlink" title="8.1 LIKE操作符"></a>8.1 LIKE操作符</h3><h4 id="8-1-1-百分号-通配符"><a href="#8-1-1-百分号-通配符" class="headerlink" title="8.1.1 百分号(%)通配符"></a>8.1.1 百分号(%)通配符</h4><blockquote><p>最常使用的通配符是百分号（%）。在搜索串中，%表示任何字符出现任意次数。</p><p>%代表搜索模式中给定位置的0个、1个或多个字符。</p></blockquote><ul><li>找出所有以词jet起头的产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'jet%'</span>;</span><br></pre></td></tr></table></figure><ul><li>找出所有以词包含文本anvil的产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'%anvil%'</span>;</span><br></pre></td></tr></table></figure><ul><li>找出以s起头以e结尾的所有产品</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'s%e'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>1.注意尾空格 在保存词anvil 时， 如果它后面有一个或多个空格， 则子句WHERE prod_name LIKE ‘%anvil’将不会匹配它们;</p><p>2.注意NULL 虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。</p></blockquote><h4 id="8-1-2-下划线-通配符"><a href="#8-1-2-下划线-通配符" class="headerlink" title="8.1.2 下划线(_)通配符"></a>8.1.2 下划线(_)通配符</h4><blockquote><p>另一个有用的通配符是下划线（_）。下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。</p></blockquote><ul><li>以下划线(_)通配符检索数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'_ ton anvil'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_id</th><th align="center">prod_name</th></tr></thead><tbody><tr><td>ANV02</td><td align="center">1 ton anvil</td></tr><tr><td>ANV03</td><td align="center">2 ton anvil</td></tr></tbody></table><ul><li>以百分号(%)通配符检索数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'% ton anvil'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>prod_id</th><th align="center">prod_name</th></tr></thead><tbody><tr><td>ANV01</td><td align="center">.5 ton anvil</td></tr><tr><td>ANV02</td><td align="center">1 ton anvil</td></tr><tr><td>ANV03</td><td align="center">2 ton anvil</td></tr></tbody></table><h3 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h3><blockquote><p>MySQL的通配符很有用。但这种功能是有代价的：通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。</p></blockquote><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;8-1-LIKE操作符&quot;&gt;&lt;a href=&quot;#8-1-LIKE操作符&quot; class=&quot;headerlink&quot; title=&quot;8.1 LIKE操作符&quot;&gt;&lt;/a&gt;8.1 LIKE操作符&lt;/h3&gt;&lt;h4 id=&quot;8-1-1-百分号-通配符&quot;&gt;&lt;a href=&quot;#8-1-
      
    
    </summary>
    
    
      <category term="MySQL必知必会笔记" scheme="https://lengmuyun.github.io/categories/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat开启gzip压缩</title>
    <link href="https://lengmuyun.github.io/2018/04/04/Tomcat%E5%BC%80%E5%90%AFgzip%E5%8E%8B%E7%BC%A9/"/>
    <id>https://lengmuyun.github.io/2018/04/04/Tomcat%E5%BC%80%E5%90%AFgzip%E5%8E%8B%E7%BC%A9/</id>
    <published>2018-04-04T13:16:20.000Z</published>
    <updated>2018-04-04T13:21:15.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、原理介绍"><a href="#一、原理介绍" class="headerlink" title="一、原理介绍"></a>一、原理介绍</h3><p>HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求服务器对应资源后，从服务器端将资源文件压缩，再输出到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程HTML ,CSS,Javascript , Text ，它可以节省40%左右的流量。更为重要的是，它可以对动态生成的，包括CGI、PHP , JSP , ASP , Servlet,SHTML等输出的网页也能进行压缩，压缩效率也很高。</p><h3 id="二、Tomcat配置"><a href="#二、Tomcat配置" class="headerlink" title="二、Tomcat配置"></a>二、Tomcat配置</h3><p>编辑tomcat目录下的conf/server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>改为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">compression</span>=<span class="string">"on"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">noCompressionUserAgents</span>=<span class="string">"gozilla, traviata"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">compressableMimeType</span>=<span class="string">"text/html,text/javascript,text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>参数说明:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compression="on" 打开压缩功能。</span><br><span class="line">compressionMinSize="2048" 启用压缩的输出内容大小，这里面默认为2KB。</span><br><span class="line">noCompressionUserAgents="gozilla, traviata" 对于这些浏览器，不启用压缩。</span><br><span class="line">compressableMimeType="text/html,text/xml" 压缩类型。</span><br><span class="line">URIEncoding="UTF-8" 设置编码为UTF-8。</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>对同一个接口，开启gzip压缩和不开启gzip压缩进行测试，不开启gzip，接收数据1.5MB，而开启gzip压缩后接收数据86.4KB，压缩率94%</p><p><img src="https://lengmuyun.github.io/uploads/pic-gzip.png" alt="image"></p><p><img src="https://lengmuyun.github.io/uploads/pic-withoutgzip.png" alt="image"></p><p>参考链接:</p><p><a href="https://blog.csdn.net/qing_gee/article/details/51538598" target="_blank" rel="noopener">https://blog.csdn.net/qing_gee/article/details/51538598</a></p><p><a href="https://my.oschina.net/refresh/blog/90986" target="_blank" rel="noopener">https://my.oschina.net/refresh/blog/90986</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、原理介绍&quot;&gt;&lt;a href=&quot;#一、原理介绍&quot; class=&quot;headerlink&quot; title=&quot;一、原理介绍&quot;&gt;&lt;/a&gt;一、原理介绍&lt;/h3&gt;&lt;p&gt;HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求服务器对应资源后，从服务器端将资源文件压缩
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
